--- linux/drivers/watchdog/aspeed_wdt.c	2021-10-20 03:03:06.081925500 -0700
+++ linux-new/drivers/watchdog/aspeed_wdt.c	2021-11-02 20:08:20.095493646 -0700
@@ -77,6 +77,7 @@
 #define AST_WATCHDOG_CTRL_INTERRUPT     0x04
 #define AST_WATCHDOG_CTRL_RESET         0x02
 #define AST_WATCHDOG_CTRL_ENABLE        0x01
+#define AST_WATCHDOG_RESET_MASK_2 0x20
 /*
  * WDT_RESET_WIDTH controls the characteristics of the external pulse (if
  * enabled), specifically:
@@ -125,11 +126,15 @@
 #define MAX_WDT_DEVICES 1
 #define WDT_PRETIMEOUT_SIGNAL 46
 
+#define AST_SCU_REG_BASE   0x1E6E2000
+#define AST_SCU_REG_LEN    SZ_4K
+
 extern int *current_wdt_no ;
 static int old_wdt_no = 1;
 int *old_wdt =& old_wdt_no ;
 static int current_wdt_device = 1;
 static void *ast_watchdog_virt_base;
+static void *ast_scu_virt_base;
 static u32 current_receiver_pid=0;
 static u32 current_extend_time=0;
 static int wdt_irq=0;
@@ -200,9 +205,19 @@
 			      unsigned long action, void *data)
 {
 	struct aspeed_wdt *wdt = to_aspeed_wdt(wdd);
+	uint32_t reg = 0;
 
 	wdt->ctrl &= ~WDT_CTRL_BOOT_SECONDARY;
 	aspeed_wdt_enable(wdt, 128 * WDT_RATE_1MHZ / 1000);
+	//Disable reset LPC and eSPI controller of WDT Reset Mask and SCU Extrst# Reset Selection Registers
+	reg = readl(wdt->base + ((*current_wdt_no - 1)*OFFSET_CALCULATOR) + AST_WATCHDOG_RESET_MASK_2);
+	reg &= ~(0x4000800);
+	writel(reg, wdt->base + ((*current_wdt_no - 1)*OFFSET_CALCULATOR) + AST_WATCHDOG_RESET_MASK_2);
+	writel(0x1688A8A8, (void __iomem*)ast_scu_virt_base + 0x0);
+	reg = readl((void __iomem*)ast_scu_virt_base + 0x70);
+	reg &= ~(0x4000800);
+	writel(reg, (void __iomem*)ast_scu_virt_base + 0x70);
+	writel(0x0, (void __iomem*)ast_scu_virt_base + 0x0);
 
 	mdelay(1000);
 
@@ -525,6 +540,13 @@
 
 	dev_set_drvdata(dev, wdt);
 	
+    ast_scu_virt_base = ioremap_nocache(AST_SCU_REG_BASE, AST_SCU_REG_LEN);
+    if (!ast_scu_virt_base) 
+	{
+        printk("ioremap WDT failed\n");
+        return -ENOMEM;
+    }
+	
 	ast_watchdog_virt_base = ioremap(AST_WATCHDOG_REG_BASE, AST_WATCHDOG_REG_LEN);
 
 	if(irq != 0)
